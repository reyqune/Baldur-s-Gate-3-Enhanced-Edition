import hashlib
import os
import shutil

# Code generated by PISS (ChatGPT), compiled by reyqune
# Function to calculate the SHA-256 hash of a file
def calculate_sha256(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

# Function to verify the hash of the file
def verify_file_hash(file_path, expected_hash):
    file_hash = calculate_sha256(file_path)
    if file_hash.lower() != expected_hash.lower():
        raise ValueError(f"File {file_path} hash mismatch! Expected {expected_hash}, but got {file_hash}. "
                         "Please verify the integrity of the game files through Steam.")
    else:
        print(f"File {file_path} hash verified successfully.")

# Function to create a backup of the file
def backup_file(file_path):
    backup_path = file_path + ".bak"
    if not os.path.exists(backup_path):  # Only create backup if it doesn't already exist
        shutil.copy2(file_path, backup_path)
        print(f"Backup created: {backup_path}")
    else:
        print(f"Backup already exists: {backup_path}")

# Hex editing function
def hex_edit(file_path, offset, original_bytes, new_bytes):
    if len(original_bytes) != len(new_bytes):
        raise ValueError("Original and new byte sequences must be of equal length")
    
    with open(file_path, 'r+b') as f:
        f.seek(offset)
        current_bytes = f.read(len(original_bytes))
        
        if current_bytes != original_bytes:
            raise ValueError(f"Original bytes do not match at offset {hex(offset)} in {file_path}")
        
        f.seek(offset)
        f.write(new_bytes)
        print(f"Patched {file_path} at offset {hex(offset)}")

# Hexadecimal byte sequences (as bytes objects)
original_bytes_bg3 = b'\x48\x89\x5c\x24\x18'
new_bytes_bg3 = b'\xc3\xcc\xcc\xcc\xcc'

original_bytes_bg3_dx11 = b'\x48\x89\x5c\x24\x18'
new_bytes_bg3_dx11 = b'\xc3\xcc\xcc\xcc\xcc'

# File paths (replace with the actual paths to your files)
file_bg3 = "bg3.exe"
file_bg3_dx11 = "bg3_dx11.exe"

# Offsets
offset_bg3 = 0x3f2ea10
offset_bg3_dx11 = 0x3EF33F0

# Expected SHA-256 hashes
expected_hash_bg3 = "BADC72325F6C41D0B9CD0F7327D619C7A01612157377E69C3FE4C72F5439AC1F"
expected_hash_bg3_dx11 = "AFF6115E7FDB043B6EAECFF31A1153BE058B5542B16574D9F6702C64A828FDD8"

# Function to pause and wait for user input before exiting
def pause_and_exit(message):
    print(message)
    input("Press Enter to exit...")  # Wait for user to press Enter before exiting

# Apply the patches
try:
    # Verify file hashes before applying patches
    verify_file_hash(file_bg3, expected_hash_bg3)
    verify_file_hash(file_bg3_dx11, expected_hash_bg3_dx11)

    # Backup files before making changes
    backup_file(file_bg3)
    backup_file(file_bg3_dx11)
    
    # Apply the hex edits if the hashes are valid
    hex_edit(file_bg3, offset_bg3, original_bytes_bg3, new_bytes_bg3)
    hex_edit(file_bg3_dx11, offset_bg3_dx11, original_bytes_bg3_dx11, new_bytes_bg3_dx11)
    
    print("Patching complete.")
except Exception as e:
    pause_and_exit(f"Error: {e}")